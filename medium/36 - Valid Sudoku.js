/**
 * @param {character[][]} board
 * @return {boolean}
 */
let isValidSudokuOptimized = function(board) {
    let rows = Array.from({ length: 9 }, () => new Set());
    let cols = Array.from({ length: 9 }, () => new Set());
    let subBoxes = Array.from({ length: 9 }, () => new Set());

    for (let r = 0; r < 9; r++) {
        for (let c = 0; c < 9; c++) {
            if (board[r][c] === '.') {
                continue;
            }

            let value = board[r][c];
            let subBoxIndex = Math.floor(r / 3) * 3 + Math.floor(c / 3);

            if (rows[r].has(value) || cols[c].has(value) || subBoxes[subBoxIndex].has(value)) {
                return false;
            }

            rows[r].add(value);
            cols[c].add(value);
            subBoxes[subBoxIndex].add(value);
        }
    }

    return true; 
}

/**
 * @param {character[][]} board
 * @return {boolean}
 */
let isValidSudoku = function(board) {
    return isValidRows(board) && isValidColumns(board) && isValidSubBoxes(board);
};

let isValidRows = function(board) {
    for (let row of board) {
        let rowValues = {};
        for (let value of row) {
            if (rowValues[value] && value !== '.') {
                return false;
            }
        
            rowValues[value] = value;
        }
    }

    return true;
}

let isValidColumns = function(board) {
    for (let i = 0; i < 9; i++) {
        let columnValues = {};
        for (let j = 0; j < 9; j++) {
            if (columnValues[board[j][i]] && board[j][i] !== '.') {
                return false;
            }

            columnValues[board[j][i]] = board[j][i];
        }
    }

    return true;
}

let isValidSubBoxes = function(board) {
    for (let subBoxX = 0; subBoxX < 9; subBoxX += 3) {
        for (let subBoxY = 0; subBoxY < 9; subBoxY += 3) {
            if (!isValidSubBox(board, subBoxX, subBoxY)) {
                return false;
            }
        }
    }

    return true;
}

let isValidSubBox = function(board, subBoxX, subBoxY) {
    let subBoxValues = {};
    for (let i = subBoxX; i < subBoxX + 3; i++) {
        for (let j = subBoxY; j < subBoxY + 3; j++) {
            if (subBoxValues[board[i][j]] && board[i][j] !== '.') {
                return false;
            }

            subBoxValues[board[i][j]] = board[i][j];
        }
    }

    return true;
}

console.log(isValidSudokuOptimized([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]));
console.log(isValidSudokuOptimized([["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]));
console.log(isValidSudokuOptimized([[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]]));
console.log(isValidSudokuOptimized([[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]]));

console.log(isValidSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]));
console.log(isValidSudoku([["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]));
console.log(isValidSudoku([[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".",".","."]]));
console.log(isValidSudoku([[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]]));